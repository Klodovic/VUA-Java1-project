/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Next Design
 */
public class EditMovie extends javax.swing.JDialog {

    private final Movie movie;
    private MovieRepository repository;
    private final DefaultListModel<Actor> actorListModel = new DefaultListModel<>();
    private final DefaultListModel<Director> directorListModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> genreListModel = new DefaultListModel<>();

    private final List<Director> directorsToDatabase = new ArrayList<>();
    private final List<Actor> actorsToDatabase = new ArrayList<>();
    private final List<Genre> genresToDatabase = new ArrayList<>();

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private List<Director> allDirectors;
    private List<Actor> allActors;
    private List<Genre> allGenres;

    private static final String EXT = ".jpg";
    private static final String DIR = "src/assets";

    int idMovie;

    /**
     * Creates new form EditMovie
     */
    public EditMovie(java.awt.Frame parent, boolean modal, Movie movie) {
        super(parent, modal);
        this.movie = movie;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPoster = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblActorsError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblActorsError1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblActorsError2 = new javax.swing.JLabel();
        cbGenres = new javax.swing.JComboBox<>();
        cbDirectors = new javax.swing.JComboBox<>();
        cbActors = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstActors = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstDirectors = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstGenres = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        lblTitleError = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblDurationError = new javax.swing.JLabel();
        txtDuration = new javax.swing.JTextField();
        txtTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblOriginalTitleError = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblPubDateError = new javax.swing.JLabel();
        txtPubDate = new javax.swing.JTextField();
        txtOriginalTitle = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        lblLinkError = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lblExpectedError = new javax.swing.JLabel();
        txtExpected = new javax.swing.JTextField();
        txtLink = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        lblPosterError = new javax.swing.JLabel();
        txtPosterPath = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lblDescriptionError = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        btnAddActor = new javax.swing.JButton();
        btnRemoveActor = new javax.swing.JButton();
        btnAddNewActor = new javax.swing.JButton();
        btnAddNewDirector = new javax.swing.JButton();
        btnRemoveDirector = new javax.swing.JButton();
        btnAddDirector = new javax.swing.JButton();
        btnAddGenre = new javax.swing.JButton();
        btnRemoveGenre = new javax.swing.JButton();
        btnAddNewGenre = new javax.swing.JButton();
        btnChangePoster = new javax.swing.JButton();
        btnUpdateMovie = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnActorsRefresh = new javax.swing.JButton();
        btnDirectorsRefresh = new javax.swing.JButton();
        btnGenresRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit selected movie");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lblPoster.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPoster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mov.png"))); // NOI18N
        lblPoster.setAlignmentY(0.0F);
        lblPoster.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        lblPoster.setPreferredSize(new java.awt.Dimension(210, 400));
        lblPoster.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabel3.setText("Add actors");
        jLabel3.setToolTipText("");

        lblActorsError.setForeground(java.awt.Color.red);

        jLabel4.setText("Add directors");
        jLabel4.setToolTipText("");

        lblActorsError1.setForeground(java.awt.Color.red);

        jLabel9.setText("Add genre");
        jLabel9.setToolTipText("");

        lblActorsError2.setForeground(java.awt.Color.red);

        jScrollPane3.setViewportView(lstActors);

        jScrollPane4.setViewportView(lstDirectors);

        jScrollPane5.setViewportView(lstGenres);

        jLabel1.setText("Title");
        jLabel1.setToolTipText("");

        lblTitleError.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblTitleError.setForeground(java.awt.Color.red);

        jLabel5.setText(" Duration (min)");
        jLabel5.setToolTipText("");

        lblDurationError.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblDurationError.setForeground(java.awt.Color.red);

        jLabel2.setText("Original title");
        jLabel2.setToolTipText("");

        lblOriginalTitleError.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblOriginalTitleError.setForeground(java.awt.Color.red);

        jLabel12.setText("Published date");
        jLabel12.setToolTipText("");

        lblPubDateError.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblPubDateError.setForeground(java.awt.Color.red);

        txtPubDate.setName("PubDate"); // NOI18N

        jLabel7.setText("Link");
        jLabel7.setToolTipText("");

        lblLinkError.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblLinkError.setForeground(java.awt.Color.red);

        jLabel13.setText("Expected date");
        jLabel13.setToolTipText("");

        lblExpectedError.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblExpectedError.setForeground(java.awt.Color.red);

        txtExpected.setName("ExpDate"); // NOI18N

        jLabel8.setText("Poster");
        jLabel8.setToolTipText("");

        lblPosterError.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblPosterError.setForeground(java.awt.Color.red);

        jLabel6.setText("Description");

        lblDescriptionError.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblDescriptionError.setForeground(java.awt.Color.red);

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        btnAddActor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnAddActor.setToolTipText("Add to list");
        btnAddActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActorActionPerformed(evt);
            }
        });

        btnRemoveActor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        btnRemoveActor.setToolTipText("Remove from list");
        btnRemoveActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActorActionPerformed(evt);
            }
        });

        btnAddNewActor.setText("Add new");
        btnAddNewActor.setToolTipText("Add new actor");
        btnAddNewActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActorActionPerformed(evt);
            }
        });

        btnAddNewDirector.setText("Add new");
        btnAddNewDirector.setToolTipText("Add new director");
        btnAddNewDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewDirectorActionPerformed(evt);
            }
        });

        btnRemoveDirector.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        btnRemoveDirector.setToolTipText("Remove from list");
        btnRemoveDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDirectorActionPerformed(evt);
            }
        });

        btnAddDirector.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnAddDirector.setToolTipText("Add to list");
        btnAddDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDirectorActionPerformed(evt);
            }
        });

        btnAddGenre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnAddGenre.setToolTipText("Add to list");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        btnRemoveGenre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        btnRemoveGenre.setToolTipText("Remove from list");
        btnRemoveGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveGenreActionPerformed(evt);
            }
        });

        btnAddNewGenre.setText(" Add new");
        btnAddNewGenre.setToolTipText("Add new genre");
        btnAddNewGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewGenreActionPerformed(evt);
            }
        });

        btnChangePoster.setText("Change poster");
        btnChangePoster.setToolTipText("Change poster");
        btnChangePoster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePosterActionPerformed(evt);
            }
        });

        btnUpdateMovie.setText("Update movie");
        btnUpdateMovie.setToolTipText("Save changes");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.setToolTipText("Cancel updating movie");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnActorsRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        btnActorsRefresh.setToolTipText("Refresh actors");
        btnActorsRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorsRefreshActionPerformed(evt);
            }
        });

        btnDirectorsRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        btnDirectorsRefresh.setToolTipText("Refresh directors");
        btnDirectorsRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorsRefreshActionPerformed(evt);
            }
        });

        btnGenresRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        btnGenresRefresh.setToolTipText("Refresh genres");
        btnGenresRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenresRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPosterError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(btnChangePoster, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(398, 398, 398)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtTitle)
                                        .addComponent(txtOriginalTitle)
                                        .addComponent(txtLink, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel12)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblPubDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel13)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblExpectedError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtPubDate)
                                        .addComponent(txtExpected, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cbActors, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(0, 0, Short.MAX_VALUE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblActorsError1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnDirectorsRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel9)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblActorsError2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cbGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnGenresRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnActorsRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(btnAddActor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnRemoveActor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnAddNewActor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoveDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAddNewDirector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoveGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAddNewGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(294, 294, 294))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel4)
                                                    .addComponent(lblActorsError1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel9)
                                                    .addComponent(lblActorsError2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnDirectorsRefresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(cbGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(btnGenresRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel3)
                                                    .addComponent(lblActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(cbActors, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(btnActorsRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnAddActor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnRemoveActor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnAddNewActor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnAddDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnRemoveDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnAddNewDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnRemoveGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnAddNewGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel2)
                                                    .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel12)
                                                    .addComponent(lblPubDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(lblLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)
                                    .addComponent(lblPosterError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtLink, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtExpected, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(250, 250, 250)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5)
                                            .addComponent(lblDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel1)
                                            .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(94, 94, 94)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(lblExpectedError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(lblDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnChangePoster, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
            init();
        } catch (Exception ex) {
            Logger.getLogger(EditMovie.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formComponentShown

    private void btnChangePosterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePosterActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        txtPosterPath.setText(file.getAbsolutePath());
        setIcon(lblPoster, file);
    }//GEN-LAST:event_btnChangePosterActionPerformed

    private void btnActorsRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorsRefreshActionPerformed
        try {
            initActors();
        } catch (Exception ex) {
            Logger.getLogger(NewMovie.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnActorsRefreshActionPerformed

    private void btnDirectorsRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorsRefreshActionPerformed
        try {
            initDirectors();
        } catch (Exception ex) {
            Logger.getLogger(NewMovie.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDirectorsRefreshActionPerformed

    private void btnGenresRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenresRefreshActionPerformed
        try {
            initGenres();
        } catch (Exception ex) {
            Logger.getLogger(NewMovie.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGenresRefreshActionPerformed

    private void btnAddActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActorActionPerformed
        Actor a = (Actor) cbActors.getSelectedItem();
        actorListModel.addElement(a);
        lstActors.setModel(actorListModel);
        refreshListActorsToDatabase();
    }//GEN-LAST:event_btnAddActorActionPerformed

    private void refreshListActorsToDatabase() {
        actorsToDatabase.clear();
        for (int i = 0; i < lstActors.getModel().getSize(); i++) {
            actorsToDatabase.add(lstActors.getModel().getElementAt(i));
        }
    }

    private void btnRemoveActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActorActionPerformed
        Actor a = lstActors.getSelectedValue();
        if (a != null) {
            actorListModel.removeElement(a);
        }
        lstActors.setModel(actorListModel);
        refreshListActorsToDatabase();
    }//GEN-LAST:event_btnRemoveActorActionPerformed

    private void btnAddNewActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActorActionPerformed
        new AddNewActor((JFrame) SwingUtilities.windowForComponent(this), true).setVisible(true);
    }//GEN-LAST:event_btnAddNewActorActionPerformed

    private void btnAddDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDirectorActionPerformed
        Director d = (Director) cbDirectors.getSelectedItem();
        directorListModel.addElement(d);
        lstDirectors.setModel(directorListModel);
        refreshListDirectorsToDatabase();
    }//GEN-LAST:event_btnAddDirectorActionPerformed

    private void refreshListDirectorsToDatabase() {
        directorsToDatabase.clear();
        for (int i = 0; i < lstDirectors.getModel().getSize(); i++) {
            directorsToDatabase.add(lstDirectors.getModel().getElementAt(i));
        }
    }

    private void btnRemoveDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDirectorActionPerformed
        Director d = lstDirectors.getSelectedValue();
        if (d != null) {
            directorListModel.removeElement(d);
        }
        lstDirectors.setModel(directorListModel);
        refreshListDirectorsToDatabase();
    }//GEN-LAST:event_btnRemoveDirectorActionPerformed

    private void btnAddNewDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewDirectorActionPerformed
        new AddNewDirector((JFrame) SwingUtilities.windowForComponent(this), true).setVisible(true);
    }//GEN-LAST:event_btnAddNewDirectorActionPerformed

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
        Genre g = (Genre) cbGenres.getSelectedItem();
        genreListModel.addElement(g);
        lstGenres.setModel(genreListModel);
        refreshListGenresToDatabase();
    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void refreshListGenresToDatabase() {
        genresToDatabase.clear();
        for (int i = 0; i < lstGenres.getModel().getSize(); i++) {
            genresToDatabase.add(lstGenres.getModel().getElementAt(i));
        }
    }

    private void btnRemoveGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveGenreActionPerformed
        Genre g = lstGenres.getSelectedValue();
        if (g != null) {
            genreListModel.removeElement(g);
        }
        lstGenres.setModel(genreListModel);
        refreshListGenresToDatabase();
    }//GEN-LAST:event_btnRemoveGenreActionPerformed

    private void btnAddNewGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewGenreActionPerformed
        new AddNewGenre((JFrame) SwingUtilities.windowForComponent(this), true).setVisible(true);
    }//GEN-LAST:event_btnAddNewGenreActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int dialogResult = MessageUtils.showConfirmDialog("Cancel", "Are you sure?");
        if (dialogResult == JOptionPane.YES_OPTION) {
            dispose();
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        if (formValid()) {
            Movie m = new Movie();
            m.setTitle(txtTitle.getText().trim());
            m.setPubDate(LocalDateTime.parse(txtPubDate.getText().trim(), Movie.DATE_FORMATTER));
            m.setDescription(taDescription.getText().trim());
            m.setOriginalTitle(txtOriginalTitle.getText().trim());
            m.setDuration(txtDuration.getText().trim());
            try {
                m.setPosterPath(copyImageToAssets(m, txtPosterPath.getText().trim()));
            } catch (IOException ex) {
                Logger.getLogger(NewMovie.class.getName()).log(Level.SEVERE, null, ex);
            }
            m.setLink(txtLink.getText().trim());
            m.setExpected(LocalDate.parse(txtExpected.getText().trim(), Movie.DATE_FORMAT));

            try {
                repository.updateMovie(idMovie, m);
                repository.removeActorsFromMovieCastByIdMovie(idMovie);
                repository.removeDirectorsFromMovieCastByIdMovie(idMovie);
                repository.removeGenresFromMovieCastByIdMovie(idMovie);
                refreshListActorsToDatabase();
                refreshListDirectorsToDatabase();
                refreshListGenresToDatabase();

                for (Director director : directorsToDatabase) {
                    Optional<Director> d = repository.selectDirectorByName(director);
                    if (d.isPresent()) {
                        int idDirector = director.getIdDirector();
                        repository.populateMovieDirection(idMovie, idDirector);
                    } else {
                        repository.createDirector(idMovie, director);
                    }
                }

                for (Actor actor : actorsToDatabase) {
                    Optional<Actor> a = repository.selectActorByName(actor);
                    if (a.isPresent()) {
                        int idActor = actor.getIdActor();
                        repository.populateMovieActor(idMovie, idActor);
                    } else {
                        repository.createActor(idMovie, actor);
                    }
                }

                for (Genre genre : genresToDatabase) {
                    Optional<Genre> g = repository.selectGenreByName(genre);
                    if (g.isPresent()) {
                        int idGenre = genre.getIdGenre();
                        repository.populateMovieGenre(idMovie, idGenre);
                    } else {
                        repository.createGenre(idMovie, genre);
                    }
                }

                dispose();

            } catch (Exception ex) {
                Logger.getLogger(EditMovie.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActorsRefresh;
    private javax.swing.JButton btnAddActor;
    private javax.swing.JButton btnAddDirector;
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnAddNewActor;
    private javax.swing.JButton btnAddNewDirector;
    private javax.swing.JButton btnAddNewGenre;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChangePoster;
    private javax.swing.JButton btnDirectorsRefresh;
    private javax.swing.JButton btnGenresRefresh;
    private javax.swing.JButton btnRemoveActor;
    private javax.swing.JButton btnRemoveDirector;
    private javax.swing.JButton btnRemoveGenre;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JComboBox<Actor> cbActors;
    private javax.swing.JComboBox<Director> cbDirectors;
    private javax.swing.JComboBox<Genre> cbGenres;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblActorsError;
    private javax.swing.JLabel lblActorsError1;
    private javax.swing.JLabel lblActorsError2;
    private javax.swing.JLabel lblDescriptionError;
    private javax.swing.JLabel lblDurationError;
    private javax.swing.JLabel lblExpectedError;
    private javax.swing.JLabel lblLinkError;
    private javax.swing.JLabel lblOriginalTitleError;
    private javax.swing.JLabel lblPoster;
    private javax.swing.JLabel lblPosterError;
    private javax.swing.JLabel lblPubDateError;
    private javax.swing.JLabel lblTitleError;
    private javax.swing.JList<Actor> lstActors;
    private javax.swing.JList<Director> lstDirectors;
    private javax.swing.JList<Genre> lstGenres;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField txtDuration;
    private javax.swing.JTextField txtExpected;
    private javax.swing.JTextField txtLink;
    private javax.swing.JTextField txtOriginalTitle;
    private javax.swing.JTextField txtPosterPath;
    private javax.swing.JTextField txtPubDate;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables

    private void init() throws Exception {
        initRepository();
        initValidation();
        initMovie();
        initActors();
        initDirectors();
        initGenres();
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initValidation() {
        validationFields = Arrays.asList(txtTitle, txtOriginalTitle, txtLink, txtDuration, txtPubDate, txtExpected, txtPosterPath, taDescription);
        errorLabels = Arrays.asList(lblTitleError, lblOriginalTitleError, lblLinkError, lblDurationError, lblPubDateError, lblExpectedError, lblPosterError, lblDescriptionError);
    }

    private void initMovie() throws Exception {
        if (movie != null) {
            List<Director> directorsInMovie;
            List<Actor> actorsInMovie;
            List<Genre> genresInMovie;
            idMovie = movie.getIdMovie();
            txtTitle.setText(movie.getTitle());
            txtOriginalTitle.setText(movie.getOriginalTitle());
            txtDuration.setText(movie.getDuration());
            txtPosterPath.setText(movie.getPosterPath());
            txtLink.setText(movie.getLink());
            txtPubDate.setText(movie.getPubDate().format(Movie.DATE_FORMATTER));
            txtExpected.setText(movie.getExpected().format(Movie.DATE_FORMAT));
            taDescription.setText(movie.getDescription());
            setIcon(lblPoster, new File(movie.getPosterPath()));

            directorsInMovie = repository.selectDirectors(idMovie);
            actorsInMovie = repository.selectActors(idMovie);
            genresInMovie = repository.selectGenres(idMovie);

            for (Director d : directorsInMovie) {
                directorListModel.addElement(d);
                //directorsToDatabase.add(d);///
                lstDirectors.setModel(directorListModel);
            }

            for (Actor a : actorsInMovie) {
                actorListModel.addElement(a);
                //actorsToDatabase.add(a);///
                lstActors.setModel(actorListModel);
            }

            for (Genre g : genresInMovie) {
                genreListModel.addElement(g);
                //genresToDatabase.add(g);///
                lstGenres.setModel(genreListModel);
            }

        }

    }

    private void initActors() throws Exception {
        allActors = repository.getAllActors();
        for (Actor actor : allActors) {
            cbActors.addItem(new Actor(actor.getIdActor(), actor.getActorName()));
        }
    }

    private void initDirectors() throws Exception {
        allDirectors = repository.getAllDirectors();
        for (Director d : allDirectors) {
            cbDirectors.addItem(new Director(d.getIdDirector(), d.getDirectorName()));
        }
    }

    private void initGenres() throws Exception {
        allGenres = repository.getAllGenres();
        for (Genre g : allGenres) {
            cbGenres.addItem(new Genre(g.getIdGenre(), g.getGenreName()));
        }
    }

    private boolean formValid() {
        boolean ok = true;
        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "*" : "");

            if ("PubDate".equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("*");
                }
            }

            if ("ExpDate".equals(validationFields.get(i).getName())) {
                try {
                    LocalDate.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMAT);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("*");
                }
            }
        }
        return ok;
    }

    private void setIcon(JLabel lblPoster, File file) {
        try {
            lblPoster.setIcon(IconUtils.createIcon(file, lblPoster.getWidth(), lblPoster.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(Movie.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private String copyImageToAssets(Movie m, String pictureUrl) throws IOException {
        String ext = pictureUrl.substring(pictureUrl.lastIndexOf("."));
            if (ext.length() > 4) {
                ext = EXT;
            }
            String pictureName = UUID.randomUUID() + ext;
            String localPicturePath = DIR + File.separator + pictureName;

            FileUtils.copy(pictureUrl, localPicturePath);
            m.setPosterPath(localPicturePath);
             return localPicturePath;
    }

}
