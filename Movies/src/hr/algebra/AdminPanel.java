/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.parsers.rss.MovieParser;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Next Design
 */
public class AdminPanel extends javax.swing.JPanel {

    private static final String DIR = "src/assets";
    private DefaultListModel<Movie> moviesModel;
    private MovieRepository repository;
    private Director existingDirector;
    private Actor existingActor;
    private Genre existingGenre;

    /**
     * Creates new form UploadMoviesPanel
     */
    public AdminPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstAllMovies = new javax.swing.JList<>();
        btnUpload = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        jScrollPane1.setViewportView(lstAllMovies);

        btnUpload.setText("Upload movies");
        btnUpload.setToolTipText("Upload movies into database");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete movies");
        btnDelete.setToolTipText("Delete movies from database");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1190, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpload)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
               
        try {

            List<Movie> allMovies = MovieParser.parse();

            for (Movie movie : allMovies) {
                int idMovie = repository.createMovie(movie);

                if (movie.getDirectors() != null) {
                    for (Director director : movie.getDirectors()) {
                        Optional<Director> d = repository.selectDirectorByName(director);
                        if (d.isPresent()) {
                            existingDirector = d.get();
                            repository.populateMovieDirection(idMovie, existingDirector.getIdDirector());
                        } else {
                            repository.createDirector(idMovie, director);
                        }
                    }
                }

                if (movie.getActors() != null) {
                    for (Actor actor : movie.getActors()) {
                        Optional<Actor> a = repository.selectActorByName(actor);
                        if (a.isPresent()) {
                            existingActor = a.get();
                            repository.populateMovieActor(idMovie, existingActor.getIdActor());
                        } else {
                            repository.createActor(idMovie, actor);
                        }
                    }
                }

                if (movie.getGenres() != null) {
                    for (Genre genre : movie.getGenres()) {
                        Optional<Genre> g = repository.selectGenreByName(genre);
                        if (g.isPresent()) {
                            existingGenre = g.get();
                            repository.populateMovieGenre(idMovie, existingGenre.getIdGenre());
                        } else {
                            repository.createGenre(idMovie, genre);
                        }
                    }
                }

            }

            /*
            Collection<Director> directors = addDirectorsToDatabase(allMovies);
            List<Director> distinctDirectors = directors.stream().distinct().collect(Collectors.toList());

            Collection<Actor> actors = addActorsToDatabase(allMovies);
            List<Actor> distinctActors = actors.stream().distinct().collect(Collectors.toList());

            Collection<Genre> genres = addGenresToDatabase(allMovies);
            List<Genre> distinctGenres = genres.stream().distinct().collect(Collectors.toList());
            
            repository.createMovie(allMovies);
            repository.createDirectors(distinctDirectors);
            repository.createActors(distinctActors);
            repository.createGenres(distinctGenres);
             */
            loadModel();

            JOptionPane.showMessageDialog(null, "The database is filled with movies!", "InfoBox: ", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUploadActionPerformed


    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            int dialogResult = JOptionPane.showConfirmDialog(null, "You're about delete all data from the database!", "Warning", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                repository.eraseAllMoviesFromDatabase();
                moviesModel.clear();
                Arrays.stream(new File(DIR).listFiles()).forEach(File::delete);
                btnUpload.setEnabled(true);
            }

        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Movie> lstAllMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            
            repository = RepositoryFactory.getRepository();
            moviesModel = new DefaultListModel<>();
            loadModel();

        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadModel() throws Exception {
        moviesModel.clear();
        List<Movie> movies = repository.selectMovies();

        movies.forEach(moviesModel::addElement);
        lstAllMovies.setModel(moviesModel);

        if (lstAllMovies.getModel().getSize() != 0) {
            btnUpload.setEnabled(false);
        }

    }
    /*
    private List<Director> addDirectorsToDatabase(List<Movie> allMovies) throws Exception {
        List<Director> directors = new ArrayList<>();
        allMovies.stream().filter((movie) -> (movie.getDirectors() != null)).forEachOrdered((movie) -> {
            movie.getDirectors().forEach(directors::add);
        });
        //repository.createDirectors(directors);
        return directors;
    }

    private List<Genre> addGenresToDatabase(List<Movie> allMovies) throws Exception {
        List<Genre> genres = new ArrayList<>();
        allMovies.stream().filter((movie) -> (movie.getGenres() != null)).forEachOrdered((movie) -> {
            movie.getGenres().forEach(genres::add);
        });
        //repository.createGenres(genres);
        return genres;
    }

    private List<Actor> addActorsToDatabase(List<Movie> allMovies) throws Exception {
        List<Actor> actors = new ArrayList<>();
        allMovies.stream().filter((movie) -> (movie.getActors() != null)).forEachOrdered((movie) -> {
            movie.getActors().forEach(actors::add);
        });
        //repository.createActors(actors);
        return actors;
    }
     */
}
