/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Genre;
import static hr.algebra.utils.MessageUtils.showInformationMessage;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Next Design
 */
public class EditPanel extends javax.swing.JPanel {

    private MovieRepository repository;
    private final DefaultListModel<Actor> actorListModel = new DefaultListModel<>();
    private final DefaultListModel<Director> directorListModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> genreListModel = new DefaultListModel<>();

    private final List<Director> directorsToDatabase = new ArrayList<>();
    private final List<Actor> actorsToDatabase = new ArrayList<>();
    private final List<Genre> genresToDatabase = new ArrayList<>();

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private List<Director> allDirectors;
    private List<Actor> allActors;
    private List<Genre> allGenres;

    /**
     * Creates new form EditPanel
     */
    public EditPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstActors = new javax.swing.JList<>();
        txtActorName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnActorUpdate = new javax.swing.JButton();
        btnRefreshActorList = new javax.swing.JButton();
        btnAddNewActor = new javax.swing.JButton();
        btnDeleteActor = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lblActorNameError = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstDirectors = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        lblDirectorNameError = new javax.swing.JLabel();
        txtDirectorName = new javax.swing.JTextField();
        btnDirectorUpdate = new javax.swing.JButton();
        btnAddNewDirector = new javax.swing.JButton();
        btnDeleteDirector = new javax.swing.JButton();
        btnRefreshDirectorList = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        lblGenreNameError = new javax.swing.JLabel();
        btnAddNewGenre = new javax.swing.JButton();
        btnDeleteGenre = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstGenre = new javax.swing.JList<>();
        btnGenreUpdate = new javax.swing.JButton();
        txtGenreName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btnRefreshGenreList = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lstActors.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstActorsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstActors);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Actors");

        btnActorUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        btnActorUpdate.setToolTipText("Update selected actor");
        btnActorUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorUpdateActionPerformed(evt);
            }
        });

        btnRefreshActorList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        btnRefreshActorList.setToolTipText("Refresh list of actors");
        btnRefreshActorList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActorListActionPerformed(evt);
            }
        });

        btnAddNewActor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnAddNewActor.setToolTipText("Add new actor");
        btnAddNewActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActorActionPerformed(evt);
            }
        });

        btnDeleteActor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        btnDeleteActor.setToolTipText("Delete selected actor");
        btnDeleteActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActorActionPerformed(evt);
            }
        });

        jLabel4.setText("Actor name");

        lblActorNameError.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblActorNameError.setForeground(java.awt.Color.red);

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Directors");

        lstDirectors.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstDirectorsValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(lstDirectors);

        jLabel8.setText("Director name");

        lblDirectorNameError.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblDirectorNameError.setForeground(java.awt.Color.red);

        btnDirectorUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        btnDirectorUpdate.setToolTipText("Update selected director");
        btnDirectorUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorUpdateActionPerformed(evt);
            }
        });

        btnAddNewDirector.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnAddNewDirector.setToolTipText("Add new director");
        btnAddNewDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewDirectorActionPerformed(evt);
            }
        });

        btnDeleteDirector.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        btnDeleteDirector.setToolTipText("Delete selected director");
        btnDeleteDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDirectorActionPerformed(evt);
            }
        });

        btnRefreshDirectorList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        btnRefreshDirectorList.setToolTipText("Refresh list of directors");
        btnRefreshDirectorList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshDirectorListActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Genres");

        lblGenreNameError.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        lblGenreNameError.setForeground(java.awt.Color.red);

        btnAddNewGenre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnAddNewGenre.setToolTipText("Add new genre");
        btnAddNewGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewGenreActionPerformed(evt);
            }
        });

        btnDeleteGenre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        btnDeleteGenre.setToolTipText("Delete selected genre");
        btnDeleteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGenreActionPerformed(evt);
            }
        });

        lstGenre.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstGenreValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(lstGenre);

        btnGenreUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        btnGenreUpdate.setToolTipText("Update selected genre");
        btnGenreUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenreUpdateActionPerformed(evt);
            }
        });

        jLabel10.setText("Genre name");

        btnRefreshGenreList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        btnRefreshGenreList.setToolTipText("Refresh list of genres");
        btnRefreshGenreList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshGenreListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblActorNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAddNewActor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(29, 29, 29)
                            .addComponent(btnDeleteActor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(31, 31, 31)
                            .addComponent(btnRefreshActorList, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtActorName, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnActorUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane4)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDirectorNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAddNewDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(29, 29, 29)
                            .addComponent(btnDeleteDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(31, 31, 31)
                            .addComponent(btnRefreshDirectorList, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtDirectorName, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnDirectorUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(96, 96, 96)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane5)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblGenreNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAddNewGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(29, 29, 29)
                            .addComponent(btnDeleteGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(31, 31, 31)
                            .addComponent(btnRefreshGenreList, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtGenreName, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnGenreUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(48, 48, 48))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(lblGenreNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtGenreName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGenreUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRefreshGenreList, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddNewGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8)
                                .addComponent(lblDirectorNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtDirectorName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDirectorUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnRefreshDirectorList, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAddNewDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDeleteDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(lblActorNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtActorName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnActorUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnRefreshActorList, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAddNewActor, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDeleteActor, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnActorUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorUpdateActionPerformed
        if (!txtActorName.getText().trim().isEmpty()) {
            lblActorNameError.setText("");
            String actorName = txtActorName.getText().trim();
            Actor a = lstActors.getSelectedValue();
            try {
                repository.updateActor(a.getIdActor(), actorName);
                txtActorName.setText("");
                showInformationMessage("Update", "The actor has been successfully updated!");
            } catch (Exception ex) {
                Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            lblActorNameError.setText("*");
        }
    }//GEN-LAST:event_btnActorUpdateActionPerformed

    private void btnAddNewActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActorActionPerformed
        new AddNewActor((JFrame) SwingUtilities.windowForComponent(this), true).setVisible(true);
    }//GEN-LAST:event_btnAddNewActorActionPerformed

    private void btnDeleteActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActorActionPerformed
        Actor a = lstActors.getSelectedValue();
        try {
            int exists = repository.checkIfActorRelatesToAMovie(a.getIdActor());
            if (exists != 0) {
                showInformationMessage("Delete actor", "The actor is related with one or more movies. Unable to delete!");
            } else {
                repository.deleteActor(a.getIdActor());
                showInformationMessage("Delete actor", "The actor has been successfully deleted!");
                txtActorName.setText("");
            }
        } catch (Exception ex) {
            Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActorActionPerformed

    private void btnRefreshActorListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActorListActionPerformed
        try {
            initActors();
        } catch (Exception ex) {
            Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRefreshActorListActionPerformed

    private void lstActorsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstActorsValueChanged
        lblActorNameError.setText("");
        Actor a = lstActors.getSelectedValue();
        if (a == null) {
            actorListModel.clear();
            lstActors.setModel(actorListModel);
        } else {
            txtActorName.setText(a.getActorName());
        }
    }//GEN-LAST:event_lstActorsValueChanged

    private void lstDirectorsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstDirectorsValueChanged
        lblDirectorNameError.setText("");
        Director d = lstDirectors.getSelectedValue();
        if (d == null) {
            directorListModel.clear();
            lstDirectors.setModel(directorListModel);
        } else {
            txtDirectorName.setText(d.getDirectorName());
        }
    }//GEN-LAST:event_lstDirectorsValueChanged

    private void lstGenreValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstGenreValueChanged
        lblGenreNameError.setText("");
        Genre g = lstGenre.getSelectedValue();
        if (g == null) {
            genreListModel.clear();
            lstGenre.setModel(genreListModel);
        } else {
            txtGenreName.setText(g.getGenreName());
        }
    }//GEN-LAST:event_lstGenreValueChanged

    private void btnDirectorUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorUpdateActionPerformed
        if (!txtDirectorName.getText().trim().isEmpty()) {
            lblDirectorNameError.setText("");
            String directorName = txtDirectorName.getText().trim();
            Director d = lstDirectors.getSelectedValue();

            try {
                repository.updateDirector(d.getIdDirector(), directorName);
                txtDirectorName.setText("");
                showInformationMessage("Update", "The director has been successfully updated!");
            } catch (Exception ex) {
                Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            lblDirectorNameError.setText("*");
        }
    }//GEN-LAST:event_btnDirectorUpdateActionPerformed

    private void btnAddNewDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewDirectorActionPerformed
        new AddNewDirector((JFrame) SwingUtilities.windowForComponent(this), true).setVisible(true);
    }//GEN-LAST:event_btnAddNewDirectorActionPerformed

    private void btnDeleteDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDirectorActionPerformed
        Director d = lstDirectors.getSelectedValue();
        try {
            int exists = repository.checkIfDirectorRelatesToAMovie(d.getIdDirector());
            if (exists != 0) {
                showInformationMessage("Delete director", "The director is related with one or more movies. Unable to delete!");
            } else {
                repository.deleteDirector(d.getIdDirector());
                showInformationMessage("Delete director", "The director has been successfully deleted!");
                txtDirectorName.setText("");
            }
        } catch (Exception ex) {
            Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteDirectorActionPerformed

    private void btnRefreshDirectorListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshDirectorListActionPerformed
        try {
            initDirectors();
        } catch (Exception ex) {
            Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRefreshDirectorListActionPerformed

    private void btnGenreUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenreUpdateActionPerformed
        if (!txtGenreName.getText().trim().isEmpty()) {
            lblGenreNameError.setText("");
            String genreName = txtGenreName.getText().trim();
            Genre g = lstGenre.getSelectedValue();

            try {
                repository.updateGenre(g.getIdGenre(), genreName);
                txtGenreName.setText("");
                showInformationMessage("Update", "The genre has been successfully updated!");
            } catch (Exception ex) {
                Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            lblGenreNameError.setText("*");
        }
    }//GEN-LAST:event_btnGenreUpdateActionPerformed

    private void btnAddNewGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewGenreActionPerformed
        new AddNewGenre((JFrame) SwingUtilities.windowForComponent(this), true).setVisible(true);
    }//GEN-LAST:event_btnAddNewGenreActionPerformed

    private void btnDeleteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGenreActionPerformed
        Genre g = lstGenre.getSelectedValue();
        try {
            int exists = repository.checkIfGenreRelatesToAMovie(g.getIdGenre());
            if (exists != 0) {
                showInformationMessage("Delete genre", "The genre is related with one or more movies. Unable to delete!");
            } else {
                repository.deleteGenre(g.getIdGenre());
                showInformationMessage("Delete genre", "The genre has been successfully deleted!");
                txtGenreName.setText("");
            }
        } catch (Exception ex) {
            Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteGenreActionPerformed

    private void btnRefreshGenreListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshGenreListActionPerformed
        try {
            initGenres();
        } catch (Exception ex) {
            Logger.getLogger(EditPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRefreshGenreListActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActorUpdate;
    private javax.swing.JButton btnAddNewActor;
    private javax.swing.JButton btnAddNewDirector;
    private javax.swing.JButton btnAddNewGenre;
    private javax.swing.JButton btnDeleteActor;
    private javax.swing.JButton btnDeleteDirector;
    private javax.swing.JButton btnDeleteGenre;
    private javax.swing.JButton btnDirectorUpdate;
    private javax.swing.JButton btnGenreUpdate;
    private javax.swing.JButton btnRefreshActorList;
    private javax.swing.JButton btnRefreshDirectorList;
    private javax.swing.JButton btnRefreshGenreList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblActorNameError;
    private javax.swing.JLabel lblDirectorNameError;
    private javax.swing.JLabel lblGenreNameError;
    private javax.swing.JList<Actor> lstActors;
    private javax.swing.JList<Director> lstDirectors;
    private javax.swing.JList<Genre> lstGenre;
    private javax.swing.JTextField txtActorName;
    private javax.swing.JTextField txtDirectorName;
    private javax.swing.JTextField txtGenreName;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            initActors();
            initDirectors();
            initGenres();
        } catch (Exception ex) {
            Logger.getLogger(NewMovie.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initActors() throws Exception {
        actorListModel.clear();
        allActors = repository.getAllActors();
        for (Actor actor : allActors) {
            actorListModel.addElement(actor);
        }
        lstActors.setModel(actorListModel);
    }

    private void initDirectors() throws Exception {
        directorListModel.clear();
        allDirectors = repository.getAllDirectors();
        for (Director d : allDirectors) {
            directorListModel.addElement(d);
        }
        lstDirectors.setModel(directorListModel);
    }

    private void initGenres() throws Exception {
        genreListModel.clear();
        allGenres = repository.getAllGenres();
        for (Genre g : allGenres) {
            genreListModel.addElement(g);
        }
        lstGenre.setModel(genreListModel);
    }
}
